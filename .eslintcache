[{"/Users/dev/dev/gostack/gobarber/gobarber-web/src/pages/SignUp/index.tsx":"1","/Users/dev/dev/gostack/gobarber/gobarber-web/src/components/Input/index.tsx":"2","/Users/dev/dev/gostack/gobarber/gobarber-web/src/components/Input/styles.ts":"3","/Users/dev/dev/gostack/gobarber/gobarber-web/src/components/Button/index.tsx":"4","/Users/dev/dev/gostack/gobarber/gobarber-web/src/utils/getValidationErrors.ts":"5"},{"size":1892,"mtime":1607979805655,"results":"6","hashOfConfig":"7"},{"size":1562,"mtime":1607977449894,"results":"8","hashOfConfig":"7"},{"size":721,"mtime":1607971692801,"results":"9","hashOfConfig":"10"},{"size":307,"mtime":1607956297541,"results":"11","hashOfConfig":"10"},{"size":323,"mtime":1607979667381,"results":"12","hashOfConfig":"7"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"x5b9pk",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ecer4w",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/dev/dev/gostack/gobarber/gobarber-web/src/pages/SignUp/index.tsx",["24"],"import React, { useCallback, useRef } from 'react';\nimport {\n  FiArrowLeft, FiMail, FiUser, FiLock,\n} from 'react-icons/fi';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport getValidationErrors from '../../utils/getValidationErrors';\n\nimport logoImg from '../../assets/logo.svg';\nimport { Container, Content, Background } from './styles';\n\nimport Input from '../../components/Input';\nimport Button from '../../components/Button';\n\nconst SignUp: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n  const handleSubmit = useCallback(async (data: Record<string, any>) => {\n    try {\n      formRef.current?.setErrors({});\n\n      const schema = Yup.object().shape({\n        name: Yup.string()\n          .required('Nome obrigatório'),\n        email: Yup.string()\n          .required('E-mail obrigatório')\n          .email('Digite um e-mail válido'),\n        password: Yup.string()\n          .min(6, 'No mínimo, 6 dígitos'),\n      });\n\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n    } catch (err) {\n      const errors = getValidationErrors(err);\n\n      formRef.current?.setErrors(errors);\n    }\n  }, []);\n\n  return (\n    <Container>\n      <Background />\n      <Content>\n        <img src={logoImg} alt=\"GoBarber\" />\n\n        <Form ref={formRef} initialData={{ name: 'Leo' }} onSubmit={handleSubmit}>\n          <h1>Faça seu cadastro</h1>\n\n          <Input name=\"name\" icon={FiUser} placeholder=\"Nome\" />\n          <Input name=\"email\" icon={FiMail} placeholder=\"E-mail\" />\n          <Input name=\"password\" icon={FiLock} type=\"password\" placeholder=\"Senha\" />\n\n          <Button type=\"submit\">Cadastrar</Button>\n        </Form>\n\n        <a href=\"forgot\">\n          <FiArrowLeft />\n          Voltar para logon\n        </a>\n      </Content>\n    </Container>\n  );\n};\n\nexport default SignUp;\n","/Users/dev/dev/gostack/gobarber/gobarber-web/src/components/Input/index.tsx",[],"/Users/dev/dev/gostack/gobarber/gobarber-web/src/components/Input/styles.ts",[],"/Users/dev/dev/gostack/gobarber/gobarber-web/src/components/Button/index.tsx",[],"/Users/dev/dev/gostack/gobarber/gobarber-web/src/utils/getValidationErrors.ts",["25"],{"ruleId":"26","severity":1,"message":"27","line":18,"column":64,"nodeType":"28","messageId":"29","endLine":18,"endColumn":67,"suggestions":"30"},{"ruleId":"31","severity":1,"message":"32","line":11,"column":22,"nodeType":"33","messageId":"34","endLine":11,"endColumn":33},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["35","36"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",{"messageId":"37","fix":"38","desc":"39"},{"messageId":"40","fix":"41","desc":"42"},"suggestUnknown",{"range":"43","text":"44"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"43","text":"45"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[638,641],"unknown","never"]